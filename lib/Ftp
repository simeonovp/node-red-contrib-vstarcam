'use strict'
const fs = require('fs');
const path = require('path');
const EventEmitter = require('events');
const FTP = require('ftp'); //https://www.npmjs.com/package/ftp

class Ftp extends EventEmitter {
  constructor(config, verb = 3, logger) {
    super();

    this.config = { host: '', port: 21, keepalive: 5000, ...config};
    this.ftp = new FTP();
    this.ready = false;

    this.verb = verb; // 1-err, 2-warn, 3-info, 4-debug, 5-trace
    this.logger = logger || console;
    this.print = (str=>{ this.logger.log(str); }).bind(this);
  }

  async connect() {
    if (!this.config.host || !this.config.port) {
      this.emit('status', 'unconfigured');
      return;
    }
    return new Promise((resolve, reject) => {
      try {
        this.ftp.on('ready', (()=>{
          this.unlock();
          resolve();
        }).bind(this));
        this.emit('status', 'initializing');
        this.ftp.connect(this.config);
      }
      catch(e) {
        this.disconnect();
        return reject(e.stack || e);
      }
    });
  }

  disconnect() {
    if (!this.ready) return;
    this.ready = false;
    this.emit('status', 'disconnected');
    this.ftp.end();
  }

  lock() {
    this.ready = false;
    this.emit('status', 'pending');
  }
  
  unlock() {
    this.ready = true;
    this.emit('status', 'connected');
  }

  async cwd(dir) {
    if (!this.ready) return;
    return new Promise((resolve, reject) => {
      try {
        this.lock();
        this.ftp.cwd(dir, (err, currentDir)=>{
          if (err) {
            this.disconnect();
            return reject(err);
          }
          this.unlock();
          resolve();
        });
      }
      catch(e) {
        this.disconnect();
        return reject(e.stack || e);
      }
    });
  }

  async list(dir) {
    if (dir) await this.cwd(dir);

    if (!this.ready) return;
    return new Promise((resolve, reject) => {
      try {
        this.lock();
        this.ftp.list((err, list)=>{
          if (err) {
            this.disconnect();
            return reject(err);
          }
          if (this.verb > 2) this.print(`files in ${dir}:`);
          this.unlock();
          resolve(list);
        });
      }
      catch(e) {
        this.disconnect();
        return reject(e.stack || e);
      }
    });
  }

  async get(filename, lfilepath) {
    if (!this.ready) return;
    return new Promise((resolve, reject) => {
      this.lock();
      this.ftp.get(filename, (err, stream)=>{
        if (err) {
          this.disconnect();
          reject(err);
        }
        else {
          stream.once('close', ()=>{ 
            this.unlock();
            resolve();
          });
        }
        stream.pipe(fs.createWriteStream(lfilepath));
      });
    }).catch(e => {
      this.disconnect();
    });
  }

  async del_file(filename) {
    if (!this.ready) return;
    return new Promise((resolve, reject) => {
      try {
        this.lock();
        this.ftp.delete(filename, err=>{
          if (err) {
            this.disconnect();
            return reject(err);
          }
          this.unlock();
          resolve();
        });
      }
      catch(e) {
        this.disconnect();
        return reject(e.stack || e);
      }
    });
  }

  async del_files(dir, filelist) {
    await this.ftp_cwd(dir);
    for (let file of filelist) {
      this.ftp.del_file(file);
    }
  }

}

module.exports = Ftp;